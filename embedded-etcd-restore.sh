#!/usr/bin/env bash
#Does a restore of local etcd based on snapshot using generated certs or already existing certs in /etc/kubernetets/pki/etcd. Snapshot location(ETCD_SNAPSHOT), restore path(RESTORE_PATH i.e. --data-dir) and what certificates to use for restoring the backup can be controlled. /etc/kubernetes/pki/server.crt is kubeadm generated cert whereas /etc/kubernetes/pki/master.crt - would mean a cert generated by using the gen-certs.sh for a machine named master.

#ETCD_SNAPSHOT=./backups/server-cert.db ETCD_CERT=server ./embedded-etcd-restore.sh 
. utils.sh
. checks/ca-err.sh
. checks/api-client-cert-err.sh

latest_snapshot
ETCD_SNAPSHOT=${ETCD_SNAPSHOT:-$LATEST_SNAPSHOT}
. checks/snapshot-exists-err.sh $ETCD_SNAPSHOT
. checks/snapshot-valid-err.sh $ETCD_SNAPSHOT

./copy-snapshot.sh $ETCD_SNAPSHOT $master_ip
next_data_dir $master_ip
RESTORE_PATH=${RESTORE_PATH:-$NEXT_DATA_DIR}

#prnt  "Would restore from $ETCD_SNAPSHOT at $RESTORE_PATH. Can change restore locations(from/to) by setting the ETCD_SNAPSHOT/RESTORE_PATH environment variables."
#read -p "Proceed with restore? " -n 1 -r
#if [[ ! $REPLY =~ ^[Yy]$ ]]
#then
#    err "\nAborted backup restore.\n"
#    exit 1
#fi

purge_restore_path $master_ip $RESTORE_PATH
sleep 2
rm .token
token=''
gen_token token
prnt "Restoring at location: ${RESTORE_PATH}"

. execute-script-remote.sh $master_ip install-etcd.script

sleep 2
cp embedded-restore.cmd restore.cmd
sed -i "s|#ETCD_SNAPSHOT#|$ETCD_SNAPSHOT|g" restore.cmd
sed -i "s|#RESTORE_PATH#|$RESTORE_PATH|g" restore.cmd	
sed -i "s|#TOKEN#|$token|g" restore.cmd	

cat restore.cmd

. execute-script-remote.sh $master_ip restore.cmd

exit_code=$?
if [ $exit_code != 0 ]; then
  err "Snapshot restore failed!"
  exit $exit_code
fi	

cp $kube_vault/etcd.yaml etcd.draft
OLD_DATA_DIR=$(cat etcd.draft | grep "\-\-data-dir=")
OLD_DATA_DIR=${OLD_DATA_DIR:17}
sed -i "s|$OLD_DATA_DIR|$RESTORE_PATH|g" etcd.draft

#initial-cluster-token
sed -i '/initial-cluster-token/d' etcd.draft
sed -i "/--client-cert-auth=true/a\    \- --initial-cluster-token=$token" etcd.draft
prnt "etcd draft: "
cat etcd.draft

#read -p "Go ahead with final restore step? " -n 1 -r
#if [[ ! $REPLY =~ ^[Yy]$ ]]
#then
 #   err "\nAborted backup restore.\n"
 #   exit 1
#fi


./pause-api-server.sh $master_ip
./stop-etcd-cluster.sh
./push-etcd-changes.sh $master_ip
sleep 4
./resume-api-server.sh $master_ip
sleep 2

prnt "Post etcd restore - checking kube-system pods..."
rm status-report 2> /dev/null

kubectl -n kube-system get pod | tee status-report

status=$(cat status-report |  awk '{if(NR>1)print}' | awk '{print $3}' | sort -u)
i=10
while [ "$i" -gt 0 ] && [[ ! $status =~ "Running" ]] ; do
  sleep $i
  i=$((i-2))
  rm status-report 
  kubectl -n kube-system get pod | tee status-report
  status=$(cat status-report |  awk '{if(NR>1)print}' | awk '{print $3}' | sort -u)
done

rm status-report
rm restore.cmd
rm etcd.draft
prnt "Snapshot restored"

